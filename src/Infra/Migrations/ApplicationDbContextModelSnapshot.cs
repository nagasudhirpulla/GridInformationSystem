// <auto-generated />
using System;
using Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infra.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("Core.Entities.Data.ApiClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ApiClients");
                });

            modelBuilder.Entity("Core.Entities.Data.ApiClientRole", b =>
                {
                    b.Property<int>("ApiClientId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ApiRoleId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("ApiClientId", "ApiRoleId");

                    b.HasIndex("ApiRoleId");

                    b.ToTable("ApiClientRoles");
                });

            modelBuilder.Entity("Core.Entities.Data.ApiRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ApiRoles");
                });

            modelBuilder.Entity("Core.Entities.Data.Datasource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Datasources");

                    b.HasDiscriminator().HasValue("Datasource");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Core.Entities.Data.Measurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("DatasourceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HistorianPntId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("MetricId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DatasourceId");

                    b.HasIndex("MetricId");

                    b.HasIndex("EntityId", "MetricId", "DatasourceId")
                        .IsUnique();

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("Core.Entities.Data.Metric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Metrics");
                });

            modelBuilder.Entity("Core.Entities.ElementOwner", b =>
                {
                    b.Property<int>("ElementId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("ElementId", "OwnerId");

                    b.HasIndex("OwnerId");

                    b.ToTable("ElementOwners");
                });

            modelBuilder.Entity("Core.Entities.GeneratingStationClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Classification")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Classification")
                        .IsUnique();

                    b.ToTable("GeneratingStationClassifications");
                });

            modelBuilder.Entity("Core.Entities.GeneratingStationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("StationType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StationType")
                        .IsUnique();

                    b.ToTable("GeneratingStationTypes");
                });

            modelBuilder.Entity("Core.Entities.GridEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GridEntities");

                    b.HasDiscriminator().HasValue("GridEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Core.Entities.GridEntityTag", b =>
                {
                    b.Property<int>("GridEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("GridEntityId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("GridEntityTags");
                });

            modelBuilder.Entity("Core.Entities.SubstationOwner", b =>
                {
                    b.Property<int>("SubstationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("SubstationId", "OwnerId");

                    b.HasIndex("OwnerId");

                    b.ToTable("SubstationOwners");
                });

            modelBuilder.Entity("Core.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Core.Entities.VoltageLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Level")
                        .IsUnique();

                    b.ToTable("VoltageLevels");
                });

            modelBuilder.Entity("Infra.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Data.ProxyDatasource", b =>
                {
                    b.HasBaseType("Core.Entities.Data.Datasource");

                    b.Property<string>("ApiKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PayloadSchema")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("ProxyDatasource");
                });

            modelBuilder.Entity("Core.Entities.Elements.Element", b =>
                {
                    b.HasBaseType("Core.Entities.GridEntity");

                    b.Property<DateTime>("CommercialOperationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CommissioningDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeCommissioningDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ElementNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsImportantGridElement")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OwnerNamesCache")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RegionCache")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Substation1Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Substation2Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VoltageLevelCache")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Substation1Id");

                    b.HasIndex("Substation2Id");

                    b.ToTable("GridEntities", t =>
                        {
                            t.Property("OwnerNamesCache")
                                .HasColumnName("Element_OwnerNamesCache");

                            t.Property("RegionCache")
                                .HasColumnName("Element_RegionCache");
                        });

                    b.HasDiscriminator().HasValue("Element");
                });

            modelBuilder.Entity("Core.Entities.Fuel", b =>
                {
                    b.HasBaseType("Core.Entities.GridEntity");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Fuel");
                });

            modelBuilder.Entity("Core.Entities.Location", b =>
                {
                    b.HasBaseType("Core.Entities.GridEntity");

                    b.Property<string>("Alias")
                        .HasColumnType("TEXT");

                    b.Property<string>("RegionCache")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StateId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("StateId");

                    b.ToTable("GridEntities", t =>
                        {
                            t.Property("RegionCache")
                                .HasColumnName("Location_RegionCache");
                        });

                    b.HasDiscriminator().HasValue("Location");
                });

            modelBuilder.Entity("Core.Entities.Owner", b =>
                {
                    b.HasBaseType("Core.Entities.GridEntity");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Owner");
                });

            modelBuilder.Entity("Core.Entities.Region", b =>
                {
                    b.HasBaseType("Core.Entities.GridEntity");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Region");
                });

            modelBuilder.Entity("Core.Entities.State", b =>
                {
                    b.HasBaseType("Core.Entities.GridEntity");

                    b.Property<int>("RegionId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RegionId");

                    b.HasDiscriminator().HasValue("State");
                });

            modelBuilder.Entity("Core.Entities.Substation", b =>
                {
                    b.HasBaseType("Core.Entities.GridEntity");

                    b.Property<bool>("IsAc")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("OwnerNamesCache")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RegionCache")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("VoltageLevelId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("LocationId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("VoltageLevelId");

                    b.HasDiscriminator().HasValue("Substation");
                });

            modelBuilder.Entity("Core.Entities.Elements.Bay", b =>
                {
                    b.HasBaseType("Core.Entities.Elements.Element");

                    b.Property<int>("BayType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Element1Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Element2Id")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFuture")
                        .HasColumnType("INTEGER");

                    b.HasIndex("Element1Id");

                    b.HasIndex("Element2Id");

                    b.ToTable("GridEntities", t =>
                        {
                            t.Property("OwnerNamesCache")
                                .HasColumnName("Element_OwnerNamesCache");

                            t.Property("RegionCache")
                                .HasColumnName("Element_RegionCache");
                        });

                    b.HasDiscriminator().HasValue("Bay");
                });

            modelBuilder.Entity("Core.Entities.Elements.Bus", b =>
                {
                    b.HasBaseType("Core.Entities.Elements.Element");

                    b.Property<int>("BusType")
                        .HasColumnType("INTEGER");

                    b.ToTable("GridEntities", t =>
                        {
                            t.Property("OwnerNamesCache")
                                .HasColumnName("Element_OwnerNamesCache");

                            t.Property("RegionCache")
                                .HasColumnName("Element_RegionCache");
                        });

                    b.HasDiscriminator().HasValue("Bus");
                });

            modelBuilder.Entity("Core.Entities.Elements.BusReactor", b =>
                {
                    b.HasBaseType("Core.Entities.Elements.Element");

                    b.Property<int>("BusId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("MvarCapacity")
                        .HasColumnType("REAL");

                    b.HasIndex("BusId");

                    b.ToTable("GridEntities", t =>
                        {
                            t.Property("OwnerNamesCache")
                                .HasColumnName("Element_OwnerNamesCache");

                            t.Property("RegionCache")
                                .HasColumnName("Element_RegionCache");
                        });

                    b.HasDiscriminator().HasValue("BusReactor");
                });

            modelBuilder.Entity("Core.Entities.Elements.FilterBank", b =>
                {
                    b.HasBaseType("Core.Entities.Elements.Element");

                    b.Property<bool>("IsSwitchable")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Mvar")
                        .HasColumnType("REAL");

                    b.ToTable("GridEntities", t =>
                        {
                            t.Property("OwnerNamesCache")
                                .HasColumnName("Element_OwnerNamesCache");

                            t.Property("RegionCache")
                                .HasColumnName("Element_RegionCache");
                        });

                    b.HasDiscriminator().HasValue("FilterBank");
                });

            modelBuilder.Entity("Core.Entities.Elements.GeneratingUnit", b =>
                {
                    b.HasBaseType("Core.Entities.Elements.Element");

                    b.Property<double>("Capacity")
                        .HasColumnType("REAL");

                    b.Property<double>("GeneratingVoltage")
                        .HasColumnType("REAL");

                    b.ToTable("GridEntities", t =>
                        {
                            t.Property("OwnerNamesCache")
                                .HasColumnName("Element_OwnerNamesCache");

                            t.Property("RegionCache")
                                .HasColumnName("Element_RegionCache");
                        });

                    b.HasDiscriminator().HasValue("GeneratingUnit");
                });

            modelBuilder.Entity("Core.Entities.Elements.HvdcLine", b =>
                {
                    b.HasBaseType("Core.Entities.Elements.Element");

                    b.Property<int>("Bus1Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Bus2Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConductorType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSpsPresent")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Length")
                        .HasColumnType("REAL");

                    b.HasIndex("Bus1Id");

                    b.HasIndex("Bus2Id");

                    b.ToTable("GridEntities", t =>
                        {
                            t.Property("OwnerNamesCache")
                                .HasColumnName("Element_OwnerNamesCache");

                            t.Property("RegionCache")
                                .HasColumnName("Element_RegionCache");
                        });

                    b.HasDiscriminator().HasValue("HvdcLine");
                });

            modelBuilder.Entity("Core.Entities.Elements.HvdcPole", b =>
                {
                    b.HasBaseType("Core.Entities.Elements.Element");

                    b.Property<int>("PoleType")
                        .HasColumnType("INTEGER");

                    b.ToTable("GridEntities", t =>
                        {
                            t.Property("OwnerNamesCache")
                                .HasColumnName("Element_OwnerNamesCache");

                            t.Property("RegionCache")
                                .HasColumnName("Element_RegionCache");
                        });

                    b.HasDiscriminator().HasValue("HvdcPole");
                });

            modelBuilder.Entity("Core.Entities.Elements.Line", b =>
                {
                    b.HasBaseType("Core.Entities.Elements.Element");

                    b.Property<int>("Bus1Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Bus2Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConductorType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAutoReclosurePresent")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Length")
                        .HasColumnType("REAL");

                    b.HasIndex("Bus1Id");

                    b.HasIndex("Bus2Id");

                    b.ToTable("GridEntities", t =>
                        {
                            t.Property("OwnerNamesCache")
                                .HasColumnName("Element_OwnerNamesCache");

                            t.Property("RegionCache")
                                .HasColumnName("Element_RegionCache");

                            t.Property("Bus1Id")
                                .HasColumnName("Line_Bus1Id");

                            t.Property("Bus2Id")
                                .HasColumnName("Line_Bus2Id");

                            t.Property("ConductorType")
                                .HasColumnName("Line_ConductorType");

                            t.Property("Length")
                                .HasColumnName("Line_Length");
                        });

                    b.HasDiscriminator().HasValue("Line");
                });

            modelBuilder.Entity("Core.Entities.Elements.LineReactor", b =>
                {
                    b.HasBaseType("Core.Entities.Elements.Element");

                    b.Property<bool>("IsConvertible")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSwitchable")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LineId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("MvarCapacity")
                        .HasColumnType("REAL");

                    b.HasIndex("LineId");

                    b.ToTable("GridEntities", t =>
                        {
                            t.Property("OwnerNamesCache")
                                .HasColumnName("Element_OwnerNamesCache");

                            t.Property("RegionCache")
                                .HasColumnName("Element_RegionCache");

                            t.Property("IsSwitchable")
                                .HasColumnName("LineReactor_IsSwitchable");

                            t.Property("MvarCapacity")
                                .HasColumnName("LineReactor_MvarCapacity");
                        });

                    b.HasDiscriminator().HasValue("LineReactor");
                });

            modelBuilder.Entity("Core.Entities.Elements.SubFilterBank", b =>
                {
                    b.HasBaseType("Core.Entities.Elements.Element");

                    b.Property<int>("FilterBankId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSwitchable")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Mvar")
                        .HasColumnType("REAL");

                    b.HasIndex("FilterBankId");

                    b.ToTable("GridEntities", t =>
                        {
                            t.Property("OwnerNamesCache")
                                .HasColumnName("Element_OwnerNamesCache");

                            t.Property("RegionCache")
                                .HasColumnName("Element_RegionCache");

                            t.Property("IsSwitchable")
                                .HasColumnName("SubFilterBank_IsSwitchable");

                            t.Property("Mvar")
                                .HasColumnName("SubFilterBank_Mvar");
                        });

                    b.HasDiscriminator().HasValue("SubFilterBank");
                });

            modelBuilder.Entity("Core.Entities.Elements.Transformer", b =>
                {
                    b.HasBaseType("Core.Entities.Elements.Element");

                    b.Property<string>("Make")
                        .HasColumnType("TEXT");

                    b.Property<double>("MvaCapacity")
                        .HasColumnType("REAL");

                    b.Property<int>("TransformerType")
                        .HasColumnType("INTEGER");

                    b.ToTable("GridEntities", t =>
                        {
                            t.Property("OwnerNamesCache")
                                .HasColumnName("Element_OwnerNamesCache");

                            t.Property("RegionCache")
                                .HasColumnName("Element_RegionCache");

                            t.Property("MvaCapacity")
                                .HasColumnName("Transformer_MvaCapacity");
                        });

                    b.HasDiscriminator().HasValue("Transformer");
                });

            modelBuilder.Entity("Core.Entities.GeneratingStation", b =>
                {
                    b.HasBaseType("Core.Entities.Substation");

                    b.Property<int>("FuelId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GeneratingStationClassificationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GeneratingStationTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("InstalledCapacity")
                        .HasColumnType("REAL");

                    b.Property<double>("MvaCapacity")
                        .HasColumnType("REAL");

                    b.HasIndex("FuelId");

                    b.HasIndex("GeneratingStationClassificationId");

                    b.HasIndex("GeneratingStationTypeId");

                    b.HasDiscriminator().HasValue("GeneratingStation");
                });

            modelBuilder.Entity("Core.Entities.Data.ApiClientRole", b =>
                {
                    b.HasOne("Core.Entities.Data.ApiClient", "ApiClient")
                        .WithMany("ApiClientRoles")
                        .HasForeignKey("ApiClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Data.ApiRole", "ApiRole")
                        .WithMany("ApiClientRoles")
                        .HasForeignKey("ApiRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiClient");

                    b.Navigation("ApiRole");
                });

            modelBuilder.Entity("Core.Entities.Data.Measurement", b =>
                {
                    b.HasOne("Core.Entities.Data.Datasource", "Datasource")
                        .WithMany()
                        .HasForeignKey("DatasourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.GridEntity", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Data.Metric", "Metric")
                        .WithMany()
                        .HasForeignKey("MetricId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Datasource");

                    b.Navigation("Entity");

                    b.Navigation("Metric");
                });

            modelBuilder.Entity("Core.Entities.ElementOwner", b =>
                {
                    b.HasOne("Core.Entities.Elements.Element", "Element")
                        .WithMany("ElementOwners")
                        .HasForeignKey("ElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Owner", "Owner")
                        .WithMany("ElementOwners")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Element");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Core.Entities.GridEntityTag", b =>
                {
                    b.HasOne("Core.Entities.GridEntity", "GridEntity")
                        .WithMany("GridEntityTags")
                        .HasForeignKey("GridEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Tag", "Tag")
                        .WithMany("GridEntityTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GridEntity");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Core.Entities.SubstationOwner", b =>
                {
                    b.HasOne("Core.Entities.Owner", "Owner")
                        .WithMany("SubstationOwners")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Substation", "Substation")
                        .WithMany("SubstationOwners")
                        .HasForeignKey("SubstationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Substation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Infra.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Infra.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infra.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Infra.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Elements.Element", b =>
                {
                    b.HasOne("Core.Entities.Substation", "Substation1")
                        .WithMany()
                        .HasForeignKey("Substation1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Substation", "Substation2")
                        .WithMany()
                        .HasForeignKey("Substation2Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Substation1");

                    b.Navigation("Substation2");
                });

            modelBuilder.Entity("Core.Entities.Location", b =>
                {
                    b.HasOne("Core.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Core.Entities.State", b =>
                {
                    b.HasOne("Core.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Core.Entities.Substation", b =>
                {
                    b.HasOne("Core.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.VoltageLevel", "VoltageLevel")
                        .WithMany()
                        .HasForeignKey("VoltageLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("VoltageLevel");
                });

            modelBuilder.Entity("Core.Entities.Elements.Bay", b =>
                {
                    b.HasOne("Core.Entities.Elements.Element", "Element1")
                        .WithMany()
                        .HasForeignKey("Element1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Elements.Element", "Element2")
                        .WithMany()
                        .HasForeignKey("Element2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Element1");

                    b.Navigation("Element2");
                });

            modelBuilder.Entity("Core.Entities.Elements.BusReactor", b =>
                {
                    b.HasOne("Core.Entities.Elements.Bus", "Bus")
                        .WithMany()
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bus");
                });

            modelBuilder.Entity("Core.Entities.Elements.HvdcLine", b =>
                {
                    b.HasOne("Core.Entities.Elements.Bus", "Bus1")
                        .WithMany()
                        .HasForeignKey("Bus1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Elements.Bus", "Bus2")
                        .WithMany()
                        .HasForeignKey("Bus2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bus1");

                    b.Navigation("Bus2");
                });

            modelBuilder.Entity("Core.Entities.Elements.Line", b =>
                {
                    b.HasOne("Core.Entities.Elements.Bus", "Bus1")
                        .WithMany()
                        .HasForeignKey("Bus1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Elements.Bus", "Bus2")
                        .WithMany()
                        .HasForeignKey("Bus2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bus1");

                    b.Navigation("Bus2");
                });

            modelBuilder.Entity("Core.Entities.Elements.LineReactor", b =>
                {
                    b.HasOne("Core.Entities.Elements.Line", "Line")
                        .WithMany()
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Line");
                });

            modelBuilder.Entity("Core.Entities.Elements.SubFilterBank", b =>
                {
                    b.HasOne("Core.Entities.Elements.FilterBank", "FilterBank")
                        .WithMany()
                        .HasForeignKey("FilterBankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FilterBank");
                });

            modelBuilder.Entity("Core.Entities.GeneratingStation", b =>
                {
                    b.HasOne("Core.Entities.Fuel", "Fuel")
                        .WithMany()
                        .HasForeignKey("FuelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.GeneratingStationClassification", "GeneratingStationClassification")
                        .WithMany()
                        .HasForeignKey("GeneratingStationClassificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.GeneratingStationType", "GeneratingStationType")
                        .WithMany()
                        .HasForeignKey("GeneratingStationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Fuel");

                    b.Navigation("GeneratingStationClassification");

                    b.Navigation("GeneratingStationType");
                });

            modelBuilder.Entity("Core.Entities.Data.ApiClient", b =>
                {
                    b.Navigation("ApiClientRoles");
                });

            modelBuilder.Entity("Core.Entities.Data.ApiRole", b =>
                {
                    b.Navigation("ApiClientRoles");
                });

            modelBuilder.Entity("Core.Entities.GridEntity", b =>
                {
                    b.Navigation("GridEntityTags");
                });

            modelBuilder.Entity("Core.Entities.Tag", b =>
                {
                    b.Navigation("GridEntityTags");
                });

            modelBuilder.Entity("Core.Entities.Elements.Element", b =>
                {
                    b.Navigation("ElementOwners");
                });

            modelBuilder.Entity("Core.Entities.Owner", b =>
                {
                    b.Navigation("ElementOwners");

                    b.Navigation("SubstationOwners");
                });

            modelBuilder.Entity("Core.Entities.Substation", b =>
                {
                    b.Navigation("SubstationOwners");
                });
#pragma warning restore 612, 618
        }
    }
}
